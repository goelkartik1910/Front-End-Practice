1. <!DOCTYPE html> tells us the type of document which is HTML and the version of HTML
2. Head --> meta tags(provide extra info(metadata) of website), links, style --> which user cannot see.
3. Body --> visible to user
4. attributes --> additional information of a tag
5. metadata --> specifies metadata of a website
6. Heading tags --> h1,h2,h3..h6
7. www.zomato.com --> base url
    food --> end point
    when the domain name changes it is external link, nd the opposite.
8. target in a tag is for making sure ki alag se tab khulega ya nahi.. agar "self" hai to usi mein
    , "blank" hai to alag se
9. lists
    unordered 
        4 types --> circle, disc(default), none, square
    ordered
        start krna ho kisi aur number ya digit se to ' start="" ' krke likhdo
        type mention krna ho ki letter hai ya number to 'type=""' krke likhdo
10. div and span
    div --> used to create divisions
        block elements (p tag, h1 tags)
        creates blocks

        how to add image in background div?
            background: url()  krke
    span --> used to create divisions
        inline elements (img tags)
        helps to make changes in single line of anything

11. Semantic tags:
    Semantic elements are the elements which are self explanatory
    header, footer, nav, section, main, form, table, article

    Non Semantic tags:
    <p> tag: kisiko nahi pta na ki ye ek paragraph

12. nav tag --> navigation only
13. header mein aapka nav and baaki ke chise bhi aati ha..
14. section --> creating sections
        as such diff nahi hota.. div and section mein bas div non semantic hai aur section semantic hai
15. article --> almost same hi Heading
16. aside --> aside from the page content
17. Media tags
        Audio tag
            <audio controls src=""></audio>
            here "controls" is important varna play nahi hoga
        Video tag
            <video controls src=""></video>
            <source> jab autoplay karna ho to aise source krke nikalo video
            autoplay
            muted
            loop
            poster --> thumbnail agar lagane ho to
18. CSS
--> inline --> <p style="color: brown;">This is a text</p>
--> internal --> when you have to write a lot of css in html only no css fiel
    <style> ye jo style hai ye head ya body kahin bhi aaskta hai
        selector {
            property:value;
        }
    </style>
--> external --> create external file and link it with "link" tag.

19. way to add one css to another 
    @import url() krke

20. order of types of css
--> inline >> internal >> external
--> agar head mein style niche hoga to vo internal ko lega varna external ko
--> inline sabse last hai to automatically it will be on high priorty.

21. CASCADING --> overiding of styles
//If I have multiple things to group I can use class//


22. CSS Selectors Types
-> simple
    1)* : universal Selectors --> selects all the thing in html
    2) .class_name : class selctors --> jab kuch group krna ho for css'ing.
    3) p : tag selector --> targeting any specific tag
    4) #id_name: id selector --> unique 


-> combinator
    --> they are made using combination of 2 Selectors
    --> they clarify relationship between 2 selectors 
    1) general sibling ~
    ex- "div~p" --> all the p tags which are siblings of all div tag
    2) adjacent sibling +
        ex- "div+p" --> all the p tags which are adjacent of all div tag
    3) child >
        target all the tags which are children
        ex- "div>p" --> all the p tags which are children of div tag
    4 descendant "space" 
        ex- I am descendant of my father.
        used to target the descendant element of a particular element
        ex how to use: "div p" --> all the p tag which are inside the div


-> pseudo-class --> single colon
    temporary states of elements
    //////////////////////////////////////////////////////
    :hover --> when you hover over anything
    :active --> when you click on any link, this only happens in "a" tag.
    :link --> not visited links
    :visited --> visited links


-> pseudo-element
    specific parts of element
    here "." will not come while mentioning in 
    //////////////////////////////////////////////////////
    ::first-line
    ::before
    ::after
    ::first-letter
    ::marker


<!-- FORM: -->
-> attribute 
    action --> where the data needs to be sent when form is submitted
    method --> http method to be used to submit the data

--> tag
    label --> for writing heading type tumhare label jaise
        for --> kis ke lie hai ye vo specify krne ke lie
    input --> for taking input
        type --> type of input mention krne ke lie
            button
            checkbox
            color
            datetime-local
            date
            email
            month
            number
            password
            text 
            radio 
            range 
            submit 
            file 
            reset 
        name --> backend mein mention krne ke lie name
        placeholder --> ek hint type text ke lie
        value --> default value ke lie
        ///////// jab multiple checkbox usne krne ho tab dhyan rakhna ki "name" attribute alag hona chahiye saare checkbox ka
        ///////// jab single choose wala ho to "name" same rhega
        readonly --> default value but cant be changed 
        disabled --> input field is disabled // only for submit
        size --> size of the visible width adjust hogi, and jitne character likhoge utna characters visible hogi
        maxlength --> max characters allowed to input in an input field
        pattern --> specifies a regular expression [[regex]]
        minlength --> min characterss allowed to input in an input field
        min and max --> min and max values for an input field
        required --> to make an input required
    
    select --> drop down ke lie
    option --> options of drop down
        isme "value" attribute is important
//////////cdn-content delivery network////////////

23. CSS Box Model
all html elements are boxes
--> CSS box model is a box that wraps around every HTML element.
--> consist of 4 parts:
    -> content
    -> padding
    -> border
    -> margin

CASCADING
an algorithm for solving the conflicts when multiple css rules are applied to an HTML element

the 4 stages in cascade algorithm are:
    1. position and order of appearance
    2. specificity
        the selector aving higher score, has more priority

        specificity scoring:
            universal --> 0
            pseudo-element and tag selector --> 1
            class, pseudo-class and attribute --> 10
            id selector --> 100;
            inline --> 1000;
            important --> 10000;

    3. origin (lower the highest)
        user agent
        local agent
        authored
        authored  ! important
        local user styles !important 
        user agent! important

    4. importance

/////////question/////////

li = 1
.lorem = 10
a:link - tag + pseudo-class - 1+10 = 11
ul ol+li - tag + tag + tag = 1+1+1 = 3
style=" " = 1000
p{
    font size: 16px !important;
} = 10000
ul ol li.red = tag + tag + tag + class = 13
article > section = tag + tag = 2
article.dark.card = tag + class + class = 21
article:hover a[href] = tag + pseudo-class + attribute  21
li#speciality section:dark = tag + id + tag + class = 112

////////table/////////
Create a table with 3 columns and 4 rows
tr --> table rows
td --> table data
th --> table head
attribute
    colspan --> merge columns
    rowspan --> merge rows


//////////css/////////
    border-collapse:collapse;
        helps us to remove double border
    :nth child - pseudo-class hai iske bracket mein aap kuch likh kr kr skte ho..


///////////CSS POSITIONS///////////
1. Static: The original position of an element
2. Relative: Element is positioned relative to its normal/original position, just that here we can move the element by adding offset values. Element stays in normal document flow.
3. Absolute: Element is positioned relative to its parent. If parent is not present then element is positioned relative to the main document. Element is remove from the normal document flow, no space is created for that element.
4. Fixed: Element is positioned relative to the viewport. Element does not move and stays in the same posiiton even on scrolling. Element is removed from normal flow.
5. Sticky: Element is posiitoned according to the normal document flow. Till the element hits the top, it has normal position , after it touched the top then it becomes fixed.

///////////CSS Flexbox///////////
1. display: flex;
    brings everything to a row
2. flex-direction: row, column, row-reverse, col-reverse
3. flex-wrap: nowrap, wrap, wrap-reverse
4. flex-flow: combination of flex-direction and flex wrap. First the flex direction comes then flex wrap.
5. justify-content: align elements with respect to your x axis.
--> values: flex-start, flex-end, start, end, center, space-between, space-around, space-evenly
6. align-items: align elements with respect to y axis.
--> value: stretch( will stretch it all along downside)
        : flex-start
        : flex-end
        : center
7. align-content: aligns element with respect to y axis, it only works when you have multiple line items, and when flex wrap is wrap or wrap-reverse.
--> values are same as align-items.

////gaps/////
row and column gaps are also there..

//////////////////
display: block, inline, inline-block
block --> converts the element in block
inline --> converts the element in inline

/////////////////////
Grid
grid-template-cloumn
    defines how many columns are there >> auto auto >> means like 2 columns
grid-template-row
    defines how many rows will be there or height of it.
align-self
    positioning along y axis
justify-self
    positioning along x axis
grid-column-start
    these are helpful if we want any particular cell to be in mergeing
grid-column-end
these are helpful if we want any particular cell to be in mergeing
grid-column
    just use a " / " and you can use start and end
    "span" helps ki hum use bolde 2,1,3 cells mein fail jao
    we can force also any element to be anywhere specifically 

repeat(2, 1fr) --> this means 2 times you are repating 1fr.

///////////////////////////
border-sizing
    border-box
        ?????????????    
    boder-content
        helps to not change the size of anything even the border is applied
iframe
    webpage inside another webpage

///////////////////////////
CSS Icons
1. google Icons
2. then add icon
can change styling by giving it a class and then applying css over it. 

Gap: helps us to create gaps in any container

///////////////////////////
MEDIA Queries --> makes our website Responsive
    Q. device width > 100px make color of text is blue
    else make it red 
    
    A. @media(type of device) also (some expressions){
        regular css code
       } 
device types-->
1. screen
2. print 
3. all (by default)

max-width and min-width

example
@media all and (min-width: 500px){
    div{
        font-size: 20px;
    }
}

Orientation-->
1. Landscape
2. Potrait

exaample
@media (orientation: landscape){
    div{
        color: red;
    }
}
1. if you want to hide any item you can say
display none and make it important

<!-- 
    relative: em, rem, vw, h, %
    absolute: px, cm, mm, pt

    widht: 400vw;
    1vw=8px
    max()
    min()
    calc()
    min-width -> it will take min 400px of width 
    max-width -> it will take max 400px of width 

    example
        width: min(40vw, 300px)

!-->

this means when the screen size is 500px minimum width then font size will be 20px
//////////////////////////////